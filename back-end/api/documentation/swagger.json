{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "API Node.js DDD",
    "description": "API Node.js using principle of DDD for project Ponto Certo",
    "contact": {
      "name": "Fernando Brozinga",
      "email": "fbrozinga@outlook.com",
      "url": "https://google.com.br"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for management users."
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in API",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResponse"
              }
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["Users"],
        "summary": "Create new User in API",
        "description": "Create new User",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/Created201"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error404"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error500"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/OK200"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error500"
            }
          }
        }
      },
      "post": {
        "summary": "Delete user with given ID",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/Deleted200"
            }
          }
        }
      },
      "patch": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/Deleted200"
            }
          }
        }
      }
    },
    "/user/email/{email}": {
      "parameters": [
        {
          "name": "email",
          "in": "path",
          "required": true,
          "description": "Email of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given Email",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/OK200"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error500"
            }
          }
        }
      }
    },
    "/user/password/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Id of user that we want to find",
          "type": "string"
        }
      ],
      "put": {
        "tags": ["Users"],
        "summary": "Updating the user's password",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Password for updated",
            "schema": {
              "$ref": "#/definitions/Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/Update200"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error500"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": [
        "name",
        "email",
        "password",
        "checkPassword",
        "entry_time",
        "exit_time"
      ],
      "properties": {
        "name": {
          "type": "string",
          "uniqueItems": true,
          "example": "fernando brozinga"
        },
        "email": {
          "type": "string",
          "uniqueItems": true,
          "format": "email",
          "example": "email@email.com.br"
        },
        "password": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "checkPassword": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "entryTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "exitTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "acessType": {
          "type": "string",
          "uniqueItems": true,
          "enum": ["admin", "user"],
          "example": "user"
        },
        "isActive": {
          "type": "boolean",
          "uniqueItems": true,
          "example": "true"
        }
      }
    },
    "UserResponse": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "5e5423f2e026820cfc84d273"
        },
        "name": {
          "type": "string",
          "uniqueItems": true,
          "example": "fernando brozinga"
        },
        "email": {
          "type": "string",
          "uniqueItems": true,
          "format": "email",
          "example": "email@email.com.br"
        },
        "password": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "checkPassword": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "entryTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "exitTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "acessType": {
          "type": "string",
          "uniqueItems": true,
          "enum": ["admin", "user"],
          "example": "user"
        },
        "isActive": {
          "type": "boolean",
          "uniqueItems": true,
          "example": "true"
        },
        "visible": {
          "type": "boolean",
          "uniqueItems": true,
          "example": "true"
        }
      }
    },
    "Password": {
      "properties": {
        "password": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "checkPassword": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        }
      }
    },
    "UserUpdate": {
      "properties": {
        "name": {
          "type": "string",
          "uniqueItems": true,
          "example": "fernando brozinga"
        },
        "email": {
          "type": "string",
          "uniqueItems": true,
          "format": "email",
          "example": "email@email.com.br"
        },
        "password": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "checkPassword": {
          "type": "string",
          "uniqueItems": true,
          "minLength": 6
        },
        "entryTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "exitTime": {
          "type": "string",
          "uniqueItems": true,
          "format": "date-time"
        },
        "acessType": {
          "type": "string",
          "uniqueItems": true,
          "enum": ["admin", "user"],
          "example": "user"
        },
        "isActive": {
          "type": "boolean",
          "uniqueItems": true,
          "example": "true"
        },
        "visible": {
          "type": "boolean",
          "uniqueItems": true,
          "example": "true"
        }
      }
    },
    "OK200": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "error": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "object",
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "Deleted200": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "error": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "object",
          "properties": {
            "n": {
              "type": "integer"
            },
            "nModified": {
              "type": "integer"
            },
            "ok": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Update200": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "error": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "object",
          "properties": {
            "n": {
              "type": "integer"
            },
            "nModified": {
              "type": "integer"
            },
            "ok": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Created201": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 201
        },
        "error": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "object",
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "Error400": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 400
        },
        "error": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Bad Request"
        }
      }
    },
    "Error404": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 404
        },
        "error": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Item não encontrado!"
        }
      }
    },
    "Error500": {
      "properties": {
        "code": {
          "type": "string",
          "example": "BBCF1648"
        },
        "status": {
          "type": "integer",
          "example": 500
        },
        "error": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Ouve um erro no servidor, fale com o Administrador!"
        }
      }
    },
    "Error422": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 422
        },
        "error": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Este email já está cadastrado!"
        }
      }
    }
  }
}
